[tool.poetry]
name = "yendoria"
version = "0.3.1"
description = "A traditional tile-based roguelike built with Python and libtcod."
authors = ["Joseph Wagner <j.wagner1024@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/josephbwagner/yendoria"
repository = "https://github.com/josephbwagner/yendoria"
keywords = ["roguelike", "game", "python", "libtcod"]
packages = [{include = "yendoria", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
tcod = "^19.0.0"
numpy = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0,<9.0"
sphinx = "^7.0"
sphinx-autodoc-typehints = "^2.3"
furo = "^2024.8.6"  # Modern, clean Sphinx theme
ruff = "^0.11.13"
mypy = "^1.11.0"
pre-commit = "^4.2.0"
pytest-cov = "^6.2.1"
pytest-html = "^4.1.1"
bandit = {extras = ["toml"], version = "^1.8.3"}
safety = "^3.5.2"
# Release automation tools
python-semantic-release = "^9.15.0"  # Semantic versioning and release automation
commitizen = "^4.1.0"  # Conventional commits and changelog generation

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10+
target-version = "py310"

# Include source and test directories
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Also enable:
# - pyupgrade (`UP`) - modernize Python code
# - isort (`I`) - import sorting
# - pylint (`PL`) - additional linting
# - flake8-bugbear (`B`) - find likely bugs
# - flake8-simplify (`SIM`) - simplify code
# - flake8-comprehensions (`C4`) - improve comprehensions
select = ["E", "F", "UP", "I", "PL", "B", "SIM", "C4"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and longer lines
"tests/**/*" = ["PLR2004", "S101", "E501"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_untyped_defs = false  # Start lenient, can be made stricter later
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = false
strict_optional = true
show_error_codes = true

# Specify explicit paths to avoid duplicate module detection
files = ["src/yendoria", "tests"]
explicit_package_bases = true
namespace_packages = true

# Per-module options
[[tool.mypy.overrides]]
module = "tcod.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "numpy.*"
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/yendoria",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=55",
    "--cov-branch",
    "--html=reports/pytest_report.html",
    "--self-contained-html"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests"
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B311", "B601"]  # Skip assert_used, random (for games), and shell_injection_process
# B101: Test for use of assert (common in tests and games)
# B311: Standard pseudo-random generators (acceptable for games)
# B601: paramiko calls (not applicable to this project)

# Python Semantic Release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/yendoria/__init__.py:__version__",
    "docs/conf.py:version",
    "docs/conf.py:release",
]
build_command = "poetry build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = false
upload_to_repository = false
remove_dist = false
commit_author = "semantic-release <semantic-release>"
tag_format = "v{version}"
major_on_zero = true
allow_zero_version = true

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = []

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.branches.master]
match = "(master|main)"
prerelease_token = "rc"
prerelease = false

# Commitizen configuration for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true
