name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_call:  # Allow this workflow to be called by other workflows

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
                # Exclude Python 3.13 on Windows due to known issues
        exclude:
          - os: windows-latest
            python-version: "3.13"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry (Windows)
      if: runner.os == 'Windows'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        $env:PATH = "$env:APPDATA\Python\Scripts;$env:PATH"
        echo "$env:APPDATA\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Install Poetry (Unix)
      if: runner.os != 'Windows'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry environment
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/pypoetry
          ~/AppData/Local/pypoetry/Cache
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run Ruff linting
      run: poetry run ruff check .

    - name: Run Ruff formatting check
      run: poetry run ruff format --check .

    - name: Run MyPy type checking
      run: poetry run mypy src/yendoria

    - name: Run tests with coverage
      run: poetry run pytest --cov=src/yendoria --cov-report=xml --cov-report=html --cov-fail-under=55

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
