name: Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even if no changes'
        required: false
        default: false
        type: boolean

# Ensure only one release runs at a time
concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # First run tests to ensure quality
  test:
    name: Run Tests
    uses: ./.github/workflows/ci.yml

  # Release job
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: github.repository == 'josephbwagner/yendoria'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Get current version
        id: current_version
        run: |
          echo "version=$(poetry version --short)" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: changes
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, will create initial release"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            # Check if there are any commits since the last tag
            CHANGES=$(git rev-list $LAST_TAG..HEAD --count)
            if [ "$CHANGES" -gt 0 ]; then
              echo "Found $CHANGES commits since last release"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "No changes since last release"
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Python Semantic Release
        id: release
        if: steps.changes.outputs.has_changes == 'true' || github.event.inputs.force_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "semantic-release"
          git config --global user.email "semantic-release@github.com"
          poetry run semantic-release version --print
          poetry run semantic-release publish

      - name: Get new version
        if: steps.release.conclusion == 'success'
        id: new_version
        run: |
          echo "version=$(poetry version --short)" >> $GITHUB_OUTPUT

      - name: Build distribution packages
        if: steps.release.conclusion == 'success'
        run: |
          poetry build
          ls -la dist/

      - name: Upload release artifacts
        if: steps.release.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ steps.new_version.outputs.version }}
          path: dist/
          retention-days: 30

      - name: Create release summary
        if: steps.release.conclusion == 'success'
        run: |
          echo "🚀 **Release ${{ steps.new_version.outputs.version }} Published!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Source distribution (sdist)" >> $GITHUB_STEP_SUMMARY
          echo "- Wheel distribution (wheel)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Changes:" >> $GITHUB_STEP_SUMMARY
          echo "See [CHANGELOG.md](./CHANGELOG.md) for detailed changes." >> $GITHUB_STEP_SUMMARY

      - name: No release needed
        if: steps.changes.outputs.has_changes == 'false' && github.event.inputs.force_release != 'true'
        run: |
          echo "ℹ️ **No Release Needed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No significant changes detected since the last release." >> $GITHUB_STEP_SUMMARY
          echo "Current version: ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
